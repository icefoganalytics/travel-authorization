import express, { Request, Response } from "express"
import cors from "cors"
import path from "path"
import helmet from "helmet"
import fileUpload from "express-fileupload"

import { DB_HOST, DB_NAME, DB_USER, FRONTEND_URL, NODE_ENV } from "@/config"
import { betterFormDataBodyParserMiddleware, requestLoggerMiddleware } from "@/middleware"
import logger from "@/utils/logger"
import enhancedQsDecoder from "@/utils/enhanced-qs-decoder"
import router from "@/routes"

const app = express()

app.set("query parser", enhancedQsDecoder)
// for parsing application/json
app.use(express.json())
// for parsing application/x-www-form-urlencoded
app.use(
  express.urlencoded({
    extended: true,
  })
)
// Adds FormData support
app.use(
  fileUpload({
    tempFileDir: "/tmp",
    useTempFiles: true,
    safeFileNames: true,
    // 2 GB, capped by estimated memory size, because current uploads must, at some point, be loaded into memory.
    // See https://github.com/icefoganalytics/internal-data-portal/issues/95
    // for how to handle larger files.
    limits: { fileSize: 2 * 1024 * 1024 * 1024 },
  })
)
app.use(betterFormDataBodyParserMiddleware)
app.use(requestLoggerMiddleware)

app.use(
  helmet.contentSecurityPolicy({
    directives: {
      "default-src": ["'self'", "https://dev-0tc6bn14.eu.auth0.com"],
      "base-uri": ["'self'"],
      "block-all-mixed-content": [],
      "font-src": ["'self'", "https:", "data:"],
      "frame-ancestors": ["'self'"],
      "frame-src": ["'self'", "blob:"],
      "img-src": ["'self'", "data:", "blob:", "https:"],
      "object-src": ["'none'"],
      "script-src": ["'self'", "https://js.arcgis.com", "'unsafe-eval'"], // added https to accomodate esri components?
      "script-src-attr": ["'none'"],
      "style-src": ["'self'", "https:", "'unsafe-inline'"],
      "worker-src": ["'self'", "blob:"],
      "connect-src": ["'self'", "https://dev-0tc6bn14.eu.auth0.com"],
    },
  })
)
app.use(
  cors({
    origin: FRONTEND_URL,
    optionsSuccessStatus: 200,
    credentials: true,
    exposedHeaders: "Content-Disposition",
  })
)

if (NODE_ENV !== "test") {
  logger.info(`host: ${DB_HOST}`)
  logger.info(`user: ${DB_USER}`)
  logger.info("psss: *********")
  logger.info(`db name: ${DB_NAME}`)
}

app.use(router)

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, "web")))

// if no other routes match, just send the front-end
app.use((_req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, "web") + "/index.html")
})

export default app
